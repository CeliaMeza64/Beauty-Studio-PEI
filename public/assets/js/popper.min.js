/*
 Copyright (C) Federico Zivolo 2020
 Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
 */

 var e = 'undefined' != typeof window && 'undefined' != typeof document && 'undefined' != typeof navigator;
 var t = function() {
     var t = ['Edge', 'Trident', 'Firefox'];
     for (var o = 0; o < t.length; o += 1) {
         if (e && navigator.userAgent.indexOf(t[o]) >= 0) return 1;
     }
     return 0;
 }();
 
 function o(e) {
     var t = false;
     return function() {
         if (!t) {
             t = true;
             window.Promise.resolve().then(function() {
                 t = false;
                 e();
             });
         }
     };
 }
 
 function n(e) {
     var o = false;
     return function() {
         if (!o) {
             o = true;
             setTimeout(function() {
                 o = false;
                 e();
             }, t);
         }
     };
 }
 
 var i = e && window.Promise;
 var r = i ? o : n;
 
 function p(e) {
     return e && '[object Function]' === {}.toString.call(e);
 }
 
 function d(e, t) {
     if (1 !== e.nodeType) return [];
     var o = e.ownerDocument.defaultView;
     var n = o.getComputedStyle(e, null);
     return t ? n[t] : n;
 }
 
 function s(e) {
     return 'HTML' === e.nodeName ? e : e.parentNode || e.host;
 }
 
 function f(e) {
     if (!e) return document.body;
     switch (e.nodeName) {
         case 'HTML':
         case 'BODY':
             return e.ownerDocument.body;
         case '#document':
             return e.body;
     }
     var t = d(e);
     return /(auto|scroll|overlay)/.test(t.overflow + t.overflowX + t.overflowY) ? e : f(s(e));
 }
 
 function a(e) {
     return e && e.referenceNode ? e.referenceNode : e;
 }
 
 var l = e && !!(window.MSInputMethodContext && document.documentMode);
 var m = e && /MSIE 10/.test(navigator.userAgent);
 
 function h(e) {
     return 11 === e ? l : 10 === e ? m : l || m;
 }
 
 function c(e) {
     if (!e) return document.documentElement;
     var t = h(10) ? document.body : null;
     var o = e.offsetParent || null;
     while (o === t && e.nextElementSibling) {
         o = (e = e.nextElementSibling).offsetParent;
     }
     var n = o && o.nodeName;
     return n && 'BODY' !== n && 'HTML' !== n ? -1 !== ['TH', 'TD', 'TABLE'].indexOf(o.nodeName) && 'static' === d(o, 'position') ? c(o) : o : e ? e.ownerDocument.documentElement : document.documentElement;
 }
 
 function u(e) {
     var t = e.nodeName;
     return 'BODY' !== t && ('HTML' === t || c(e.firstElementChild) === e);
 }
 
 function g(e) {
     return null === e.parentNode ? e : g(e.parentNode);
 }
 
 function b(e, t) {
     if (!e || !e.nodeType || !t || !t.nodeType) return document.documentElement;
     var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING;
     var n = o ? e : t;
     var i = o ? t : e;
     var r = document.createRange();
     r.setStart(n, 0);
     r.setEnd(i, 0);
     var p = r.commonAncestorContainer;
     if (e !== p && t !== p || n.contains(i)) return u(p) ? p : c(p);
     var d = g(e);
     return d.host ? b(d.host, t) : b(e, g(t).host);
 }
 
 function w(e, t) {
     var o = 'top' === t ? 'scrollTop' : 'scrollLeft';
     var n = e.nodeName;
     if ('BODY' === n || 'HTML' === n) {
         var t = e.ownerDocument.documentElement;
         var n = e.ownerDocument.scrollingElement || t;
         return n[o];
     }
     return e[o];
 }
 
 function y(e, t, o) {
     if (o === void 0) {
         o = false;
     }
     var n = w(t, 'top');
     var i = w(t, 'left');
     var r = o ? -1 : 1;
     e.top += n * r;
     e.bottom += n * r;
     e.left += i * r;
     e.right += i * r;
     return e;
 }
 
 function E(e, t) {
     var o = 'x' === t ? 'Left' : 'Top';
     var n = 'Left' === o ? 'Right' : 'Bottom';
     return parseFloat(e['border' + o + 'Width']) + parseFloat(e['border' + n + 'Width']);
 }
 
 function x(e, t, o, n) {
     return Math.max(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], h(10) ? parseInt(o['offset' + e]) + parseInt(n['margin' + ('Height' === e ? 'Top' : 'Left')]) + parseInt(n['margin' + ('Height' === e ? 'Bottom' : 'Right')]) : 0);
 }
 
 function v(e) {
     var t = e.body;
     var o = e.documentElement;
     var n = h(10) && getComputedStyle(o);
     return {
         height: x('Height', t, o, n),
         width: x('Width', t, o, n)
     };
 }
 
 var O = Object.assign || function(e) {
     for (var t, o = 1; o < arguments.length; o++) {
         for (var n in t = arguments[o], t) {
             if (Object.prototype.hasOwnProperty.call(t, n)) {
                 e[n] = t[n];
             }
         }
     }
     return e;
 };
 
 function L(e) {
     return O({}, e, {
         right: e.left + e.width,
         bottom: e.top + e.height
     });
 }
 
 function S(e) {
     var t = {};
     try {
         if (h(10)) {
             t = e.getBoundingClientRect();
             var o = w(e, 'top');
             var n = w(e, 'left');
             t.top += o;
             t.left += n;
             t.bottom += o;
             t.right += n;
         } else {
             t = e.getBoundingClientRect();
         }
     } catch (t) {}
     var o = {
         left: t.left,
         top: t.top,
         width: t.right - t.left,
         height: t.bottom - t.top
     };
     var n = 'HTML' === e.nodeName ? v(e.ownerDocument) : {};
     var i = n.width || e.clientWidth || o.width;
     var r = n.height || e.clientHeight || o.height;
     var p = e.offsetWidth - i;
     var s = e.offsetHeight - r;
     if (p || s) {
         var t = d(e);
         p -= E(t, 'x');
         s -= E(t, 'y');
         o.width -= p;
         o.height -= s;
     }
     return L(o);
 }
 
 function T(e, t, o) {
     if (o === void 0) {
         o = false;
     }
     var n = Math.max;
     var i = h(10);
     var r = 'HTML' === t.nodeName;
     var p = S(e);
     var s = S(t);
     var a = f(e);
     var l = d(t);
     var m = parseFloat(l.borderTopWidth);
     var c = parseFloat(l.borderLeftWidth);
     if (o && r) {
         s.top = n(s.top, 0);
         s.left = n(s.left, 0);
     }
     var u = L({
         top: p.top - s.top - m,
         left: p.left - s.left - c,
         width: p.width,
         height: p.height
     });
     if (u.marginTop = 0, u.marginLeft = 0, !i && r) {
         var e = parseFloat(l.marginTop);
         var t = parseFloat(l.marginLeft);
         u.top -= m - e;
         u.bottom -= m - e;
         u.left -= c - t;
         u.right -= c - t;
         u.marginTop = e;
         u.marginLeft = t;
     }
     return (i && !o ? t.contains(a) : t === a && 'BODY' !== a.nodeName) && (u = y(u, t)), u;
 }
 
 function D(e, t) {
     if (t === void 0) {
         t = false;
     }
     var o = Math.max;
     var n = e.ownerDocument.documentElement;
     var i = T(e, n);
     var r = o(n.clientWidth, window.innerWidth || 0);
     var p = o(n.clientHeight, window.innerHeight || 0);
     var s = i.width;
     var a = i.height;
     var l = o(0, e.scrollWidth, s);
     var m = o(0, e.scrollHeight, a);
     var c = {
         top: o(0, i.top),
         left: o(0, i.left),
         right: o(0, r - i.left - i.width),
         bottom: o(0, p - i.top - i.height),
         width: l,
         height: m
     };
     return t ? c : O({}, c, {
         left: c.left + e.scrollLeft,
         top: c.top + e.scrollTop
     });
 }
 
 function A(e) {
     var t = e.ownerDocument;
     var o = f(e);
     var n = t.body;
     var i = (t.documentElement || {}).style;
     var r = parseFloat(i.marginTop || 0);
     var p = parseFloat(i.marginLeft || 0);
     return {
         top: -r,
         left: -p,
         width: Math.max(o.scrollWidth, o.offsetWidth),
         height: Math.max(o.scrollHeight, o.offsetHeight)
     };
 }
 
 function C(e) {
     var t = A(e);
     var o = T(e, f(e), true);
     return O({}, o, {
         top: o.top - t.top,
         left: o.left - t.left
     });
 }
 
 function I(e) {
     var t = C(e);
     var o = T(e, f(e));
     var n = {
         top: Math.max(o.top - t.top, 0),
         left: Math.max(o.left - t.left, 0),
         width: Math.min(o.width, t.width - o.left + t.left),
         height: Math.min(o.height, t.height - o.top + t.top)
     };
     return n;
 }
 
 function R(e, t) {
     return 'string' === typeof t ? e.getAttribute(t) : e.getAttribute('data-' + t);
 }
 
 function N(e, t, o) {
     if ('string' === typeof o) {
         e.setAttribute(t, o);
     } else {
         for (var n in o) {
             e.setAttribute(t + '-' + n, o[n]);
         }
     }
 }
 
 function P(e) {
     return e && e.parentNode ? e.parentNode.removeChild(e) : null;
 }
 
 function M(e, t, o) {
     var n = [];
     e.forEach(function(e) {
         if (e.nodeType === Node.ELEMENT_NODE) {
             n.push(e);
         }
     });
     if (n.length > 0) {
         if (o) {
             n.forEach(function(e) {
                 return e.classList.add(t);
             });
         } else {
             n.forEach(function(e) {
                 return e.classList.remove(t);
             });
         }
     }
 }
 
 function H(e, t) {
     if ('function' === typeof t) {
         t(e);
     }
 }
 
 function B(e, t) {
     var o = {
         top: 0,
         left: 0
     };
     if (e && e.nodeType === Node.ELEMENT_NODE) {
         var n = T(e, t);
         o.top = n.top;
         o.left = n.left;
     }
     return o;
 }
 
 function z(e) {
     return {
         top: e.top || 0,
         left: e.left || 0,
         right: e.right || 0,
         bottom: e.bottom || 0,
         width: e.width || 0,
         height: e.height || 0
     };
 }
 
 function K(e) {
     var t = document.createElement('div');
     t.style.position = 'absolute';
     t.style.top = '0';
     t.style.left = '0';
     t.style.width = '100px';
     t.style.height = '100px';
     t.style.overflow = 'scroll';
     t.style.visibility = 'hidden';
     document.body.appendChild(t);
     var o = t.scrollLeft;
     var n = t.scrollTop;
     document.body.removeChild(t);
     return {
         scrollLeft: o,
         scrollTop: n
     };
 }
 
 function Q(e) {
     var t = e.getBoundingClientRect();
     return {
         top: t.top,
         left: t.left,
         bottom: t.bottom,
         right: t.right,
         width: t.width,
         height: t.height
     };
 }
 
 function J(e, t) {
     var o = e && e.nodeType;
     if (!o) return;
     var n = t && t.nodeType;
     if (!n) return;
     var i = e.ownerDocument.documentElement;
     var r = e === i;
     var p = r ? i : e;
     var s = t === i;
     var a = s ? i : t;
     var l = t ? t.offsetTop : 0;
     var m = t ? t.offsetLeft : 0;
     var c = p.getBoundingClientRect();
     var u = a.getBoundingClientRect();
     var g = u.top - c.top - l;
     var b = u.left - c.left - m;
     return {
         top: g,
         left: b,
         width: u.width,
         height: u.height
     };
 }
 
 function G(e, t) {
     var o = [];
     for (var n = 0; n < e.length; n++) {
         o.push(e[n].textContent.trim());
     }
     return o;
 }
 
 function W(e) {
     return e && e.nodeType === Node.ELEMENT_NODE && e.tagName === 'DIV';
 }
 
 function V(e) {
     if (e && e.nodeType === Node.ELEMENT_NODE) {
         var t = Q(e);
         var o = {
             top: t.top,
             left: t.left,
             bottom: t.bottom,
             right: t.right,
             width: t.width,
             height: t.height
         };
         var n = B(e, f(e));
         return O({}, o, {
             top: o.top - n.top,
             left: o.left - n.left
         });
     }
 }
 
 function U(e) {
     return {
         top: e.top || 0,
         left: e.left || 0,
         right: e.right || 0,
         bottom: e.bottom || 0
     };
 }
 